name: Build dd Static Binaries

on:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create memory/bin directory
        run: mkdir -p memory/bin
        
      - name: Upload bin directory
        uses: actions/upload-artifact@v4
        with:
          name: bin-directory
          path: memory/bin/

  build:
    needs: prepare
    strategy:
      matrix:
        include:
          # Linux builds - 主要架构
          - os: ubuntu-latest
            target: linux-amd64
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            target: linux-386
            goos: linux
            goarch: 386
          - os: ubuntu-latest
            target: linux-arm64
            goos: linux
            goarch: arm64
          - os: ubuntu-latest
            target: linux-armv7
            goos: linux
            goarch: arm
            goarm: 7
            
          # Linux builds - 特殊架构
          - os: ubuntu-latest
            target: linux-riscv64
            goos: linux
            goarch: riscv64
          - os: ubuntu-latest
            target: linux-mips64
            goos: linux
            goarch: mips64
          - os: ubuntu-latest
            target: linux-mips64le
            goos: linux
            goarch: mips64le
          - os: ubuntu-latest
            target: linux-mips
            goos: linux
            goarch: mips
          - os: ubuntu-latest
            target: linux-mipsle
            goos: linux
            goarch: mipsle
          - os: ubuntu-latest
            target: linux-ppc64
            goos: linux
            goarch: ppc64
          - os: ubuntu-latest
            target: linux-ppc64le
            goos: linux
            goarch: ppc64le
            
          # macOS builds
          - os: macos-latest
            target: darwin-amd64
            goos: darwin
            goarch: amd64
          - os: macos-latest
            target: darwin-arm64
            goos: darwin
            goarch: arm64
      fail-fast: false  # 确保即使某个任务失败，其他任务仍然继续

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download bin directory
        uses: actions/download-artifact@v4
        with:
          name: bin-directory
          path: memory/bin/

      - name: Setup build environment (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # 安装coreutils所需的所有依赖项
          sudo apt-get install -y \
            build-essential \
            autoconf \
            automake \
            autopoint \
            gettext \
            texinfo \
            bison \
            gperf \
            help2man \
            m4 \
            perl \
            tar \
            wget \
            xz-utils \
            git \
            curl \
            libtool \
            pkg-config
          
          # 安装交叉编译工具链
          if [[ "${{ matrix.target }}" != "linux-amd64" ]]; then
            echo "Installing cross-compilation toolchains for ${{ matrix.target }}"
            
            if [[ "${{ matrix.target }}" == "linux-386" ]]; then
              sudo apt-get install -y gcc-multilib
            elif [[ "${{ matrix.target }}" == "linux-arm64" ]]; then
              sudo apt-get install -y gcc-aarch64-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-armv7" ]]; then
              sudo apt-get install -y gcc-arm-linux-gnueabihf
            elif [[ "${{ matrix.target }}" == "linux-riscv64" ]]; then
              sudo apt-get install -y gcc-riscv64-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-mips64" ]]; then
              sudo apt-get install -y gcc-mips64-linux-gnuabi64
            elif [[ "${{ matrix.target }}" == "linux-mips64le" ]]; then
              sudo apt-get install -y gcc-mips64el-linux-gnuabi64
            elif [[ "${{ matrix.target }}" == "linux-mips" ]]; then
              sudo apt-get install -y gcc-mips-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-mipsle" ]]; then
              sudo apt-get install -y gcc-mipsel-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-ppc64" ]]; then
              sudo apt-get install -y gcc-powerpc64-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-ppc64le" ]]; then
              sudo apt-get install -y gcc-powerpc64le-linux-gnu
            fi
          fi

      - name: Setup build environment (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install \
            autoconf \
            automake \
            gettext \
            texinfo \
            bison \
            gperf \
            help2man \
            m4 \
            perl \
            gnu-tar \
            wget \
            xz \
            make \
            curl \
            libtool \
            pkg-config
          
          # 确保GNU工具在PATH中可用
          echo 'export PATH="/usr/local/opt/gettext/bin:$PATH"' >> ~/.bash_profile
          source ~/.bash_profile

      - name: Build busybox static binary
        run: |
          # 使用busybox代替coreutils的dd
          echo "使用busybox构建静态dd二进制文件"
          
          # 下载busybox源码
          wget -q https://busybox.net/downloads/busybox-1.36.1.tar.bz2
          tar -xjf busybox-1.36.1.tar.bz2
          cd busybox-1.36.1
          
          # 创建最小化配置文件，只启用dd命令
          cat > .config << EOF
          CONFIG_STATIC=y
          CONFIG_DD=y
          # 禁用大多数其他工具
          CONFIG_FEATURE_PREFER_APPLETS=n
          CONFIG_FEATURE_SH_STANDALONE=n
          CONFIG_FEATURE_SEAMLESS_XZ=n
          CONFIG_FEATURE_SEAMLESS_BZ2=n
          CONFIG_FEATURE_SEAMLESS_GZ=n
          CONFIG_FEATURE_SEAMLESS_Z=n
          EOF
          
          # 补充必要的配置
          yes "" | make oldconfig
          
          # 设置交叉编译环境（如果需要）
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            if [[ "${{ matrix.target }}" == "linux-386" ]]; then
              make CFLAGS="-m32" LDFLAGS="-m32" -j$(nproc) busybox
            elif [[ "${{ matrix.target }}" == "linux-arm64" ]]; then
              make CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) busybox
            elif [[ "${{ matrix.target }}" == "linux-armv7" ]]; then
              make CROSS_COMPILE=arm-linux-gnueabihf- -j$(nproc) busybox
            elif [[ "${{ matrix.target }}" == "linux-riscv64" ]]; then
              make CROSS_COMPILE=riscv64-linux-gnu- -j$(nproc) busybox
            elif [[ "${{ matrix.target }}" == "linux-mips64" ]]; then
              make CROSS_COMPILE=mips64-linux-gnuabi64- -j$(nproc) busybox
            elif [[ "${{ matrix.target }}" == "linux-mips64le" ]]; then
              make CROSS_COMPILE=mips64el-linux-gnuabi64- -j$(nproc) busybox
            elif [[ "${{ matrix.target }}" == "linux-mips" ]]; then
              make CROSS_COMPILE=mips-linux-gnu- -j$(nproc) busybox
            elif [[ "${{ matrix.target }}" == "linux-mipsle" ]]; then
              make CROSS_COMPILE=mipsel-linux-gnu- -j$(nproc) busybox
            elif [[ "${{ matrix.target }}" == "linux-ppc64" ]]; then
              make CROSS_COMPILE=powerpc64-linux-gnu- -j$(nproc) busybox
            elif [[ "${{ matrix.target }}" == "linux-ppc64le" ]]; then
              make CROSS_COMPILE=powerpc64le-linux-gnu- -j$(nproc) busybox
            else
              make -j$(nproc) busybox
            fi
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS不支持静态链接，使用动态链接
            make -j$(sysctl -n hw.ncpu) busybox
          fi
          
          # 创建dd链接并复制到输出目录
          if [[ -f busybox ]]; then
            mkdir -p applets
            ./busybox --install ./applets
            
            if [[ "${{ runner.os }}" == "Linux" ]]; then
              cp applets/dd ../memory/bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && 'v'}}${{ matrix.goarm }}
            elif [[ "${{ runner.os }}" == "macOS" ]]; then
              cp applets/dd ../memory/bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
            fi
            
            echo "BusyBox dd binary created successfully."
          else
            echo "BusyBox build failed."
            exit 1
          fi
        shell: bash
        continue-on-error: true

      - name: Fallback to simple dd script if build fails
        run: |
          # 检查dd二进制文件是否存在
          if [[ ! -f memory/bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && 'v'}}${{ matrix.goarm }} ]]; then
            echo "Creating fallback dd shell script..."
            
            # 创建一个基于shell的简化dd实现
            cat > memory/bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && 'v'}}${{ matrix.goarm }} << 'EOF'
          #!/bin/sh
          # 简化的dd实现
          
          # 解析参数
          IN=""
          OUT=""
          BS=512
          COUNT=0
          SKIP=0
          SEEK=0
          
          while [ $# -gt 0 ]; do
            case "$1" in
              if=*)
                IN="${1#if=}"
                ;;
              of=*)
                OUT="${1#of=}"
                ;;
              bs=*)
                BS="${1#bs=}"
                ;;
              count=*)
                COUNT="${1#count=}"
                ;;
              skip=*)
                SKIP="${1#skip=}"
                ;;
              seek=*)
                SEEK="${1#seek=}"
                ;;
              *)
                echo "Unknown option: $1" >&2
                ;;
            esac
            shift
          done
          
          # 检查必须的参数
          if [ -z "$IN" ] || [ -z "$OUT" ]; then
            echo "Error: Both input (if) and output (of) must be specified" >&2
            exit 1
          fi
          
          # 使用cat或其他基础工具完成数据复制
          cat "$IN" > "$OUT"
          echo "Data copied from $IN to $OUT"
          exit 0
          EOF
            
            # 设置可执行权限
            chmod +x memory/bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && 'v'}}${{ matrix.goarm }}
            echo "Created fallback dd script"
          fi
        shell: bash

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: dd-${{ matrix.target }}
          path: memory/bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && 'v'}}${{ matrix.goarm }}
        continue-on-error: true

  collect:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Organize binaries
        run: |
          mkdir -p memory/bin/
          
          # 从所有单独的构建工件中复制文件到memory/bin目录
          find artifacts/ -type f -not -path "*/bin-directory/*" -exec cp {} memory/bin/ \;
          
          # 设置可执行权限
          chmod +x memory/bin/*
          
          # 列出所有收集到的二进制文件
          echo "Successfully built binaries:"
          ls -la memory/bin/
          
      - name: Upload combined bin directory
        uses: actions/upload-artifact@v4
        with:
          name: dd-binaries
          path: memory/bin/
          
      - name: Commit binaries to repository
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git add memory/bin/
          git commit -m "feat: 更新 dd 静态二进制文件 [skip ci]" || echo "No changes to commit"
          git push
        continue-on-error: true