name: Build and Package Coreutils
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          # Linux (GNU)
          - { triple: "x86_64-unknown-linux-gnu", name: "linux-amd64" }
          - { triple: "aarch64-unknown-linux-gnu", name: "linux-arm64" }
          - { triple: "i686-unknown-linux-gnu", name: "linux-386" }
          # Linux (MUSL)
          - { triple: "x86_64-unknown-linux-musl", name: "linux-musl-amd64" }
          - { triple: "aarch64-unknown-linux-musl", name: "linux-musl-arm64" }
          - { triple: "i686-unknown-linux-musl", name: "linux-musl-386" }
          # macOS
          - { triple: "x86_64-apple-darwin", name: "darwin-amd64" }
          - { triple: "aarch64-apple-darwin", name: "darwin-arm64" }
          # Windows (MSVC)
          - { triple: "x86_64-pc-windows-msvc", name: "windows-amd64" }
          - { triple: "i686-pc-windows-msvc", name: "windows-386" }
          # ARM
          - { triple: "arm-unknown-linux-gnueabihf", name: "linux-armhf" }
    steps:
      - name: 检出代码库
        uses: actions/checkout@v4
      
      - name: 获取最新版本号
        id: get_version
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/uutils/coreutils/releases/latest)
          VERSION=$(echo "$LATEST_RELEASE" | grep -Po '"tag_name": "\K.*?(?=")' | sed 's/^v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "版本号: $VERSION"
      
      - name: 下载Coreutils
        run: |
          # 根据三元组确定文件扩展名
          if [[ "${{ matrix.target.triple }}" == *"windows"* ]]; then
            EXT="zip"
          else
            EXT="tar.gz"
          fi
          
          # 构建下载URL
          URL="https://github.com/uutils/coreutils/releases/latest/download/coreutils-$VERSION-${{ matrix.target.triple }}.$EXT"
          echo "下载: $URL"
          
          # 下载文件
          curl -LO "$URL"
          
          # 保存文件名到环境变量
          echo "DOWNLOAD_FILE=coreutils-$VERSION-${{ matrix.target.triple }}.$EXT" >> $GITHUB_ENV
      
      - name: 解压文件并处理
        run: |
          # 创建输出目录
          mkdir -p memory/bin
          
          echo "处理文件: $DOWNLOAD_FILE"
          
          # 根据文件类型解压
          if [[ "$DOWNLOAD_FILE" == *.zip ]]; then
            # 创建临时目录并解压
            mkdir -p temp_extract
            unzip "$DOWNLOAD_FILE" -d temp_extract
            
            # 查找coreutils.exe并复制到目标位置
            find temp_extract -type f -name "coreutils.exe" -exec cp {} "memory/bin/coreutils-${{ matrix.target.name }}.exe" \;
          else
            # 创建临时目录并解压
            mkdir -p temp_extract
            tar -xf "$DOWNLOAD_FILE" -C temp_extract
            
            # 查找coreutils二进制文件并复制到目标位置
            find temp_extract -type f -name "coreutils" -exec cp {} "memory/bin/coreutils-${{ matrix.target.name }}" \;
            chmod +x "memory/bin/coreutils-${{ matrix.target.name }}"
          fi
          
          # 检查是否成功找到并复制了文件
          if [[ "$DOWNLOAD_FILE" == *.zip ]]; then
            if [ ! -f "memory/bin/coreutils-${{ matrix.target.name }}.exe" ]; then
              echo "未能找到coreutils.exe，显示目录结构："
              find temp_extract -type f
              exit 1
            fi
          else
            if [ ! -f "memory/bin/coreutils-${{ matrix.target.name }}" ]; then
              echo "未能找到coreutils二进制文件，显示目录结构："
              find temp_extract -type f
              exit 1
            fi
          fi
      
      - name: 上传Coreutils二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: coreutils-${{ matrix.target.name }}
          path: memory/bin/
          retention-days: 1

  combine:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码库
        uses: actions/checkout@v4
      
      - name: 创建目录
        run: mkdir -p all-binaries
      
      - name: 下载所有二进制文件
        uses: actions/download-artifact@v4
        with:
          path: all-binaries
          pattern: coreutils-*
          merge-multiple: true
      
      - name: 显示下载的文件
        run: find all-binaries -type f | sort
      
      - name: 上传合并后的二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: coreutils-binaries
          path: all-binaries/**/*